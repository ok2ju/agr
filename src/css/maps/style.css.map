{"version":3,"sources":["style.css","utils/_helpers.scss","base/_base.scss","utils/_fontUtils.scss","base/_variables.scss","base/_typography.scss","layout/_layout.scss","../../bower_components/susy/sass/susy/language/susy/_container.scss","../../bower_components/susy/sass/susy/language/susy/_background.scss","../../bower_components/susy/sass/susy/language/susy/_span.scss","../../bower_components/susy/sass/susy/output/shared/_background.scss","../../bower_components/susy/sass/susy/output/support/_clearfix.scss","utils/_clearfix.scss","module/_header.scss","module/_header-nav.scss","module/_slick.scss","module/_header-slider.scss"],"names":[],"mappings":"AAAA,WCAA,UACS,CAAA,YACR,WAGQ,CAAA,KACR,sBCKa,eACD,CAAA,UAIb,WACU,CAAA,EAAK,SAIP,SACN,CAAO,mBAKR,kBACa,CAAA,KACb,mCChByB,kCACC,yBCNd,cAGQ,yCATa,iBAEjB,iCFiCC,CAAA,EAAmB,oBAIlB,CAAA,iBAKnB,cACa,CAAA,OACZ,YAGS,OACJ,kBACM,MACP,UACI,CAAA,WACR,wBGvDc,mEACoC,gBACpC,iBACD,CAAA,WAGd,wBACe,qEACsC,gBACtC,iBACD,CAAA,WAGd,wBACe,sEACuC,gBACvC,iBACD,CAAA,WAGd,wBACe,kEACmC,gBACnC,iBACD,CAAA,WCzBd,iBJEa,iBKsEuB,kBAA+B,0FC1BpC,yBC6GjB,8BDsL6B,4BAAA,4BE5TN,CAAA,iBCVhC,YACU,cACA,UACF,CAAA,YCTV,WACQ,WACE,aACA,CAAA,QACV,iBCRW,CAAA,gBACb,qBCDU,cACA,CAAA,cACV,kBCAW,cACD,sBACG,2BACW,yBACF,AACD,sBACF,qBACD,iBACJ,uBACK,mBACJ,uCACe,CAAA,YAC9B,kBAGW,gBACA,cACD,SACH,SACN,CAAO,kBALE,YAQE,CAAA,qBARF,eAYC,WACA,CAAA,qDAKE,uCACO,AACH,mCACD,AACD,8BACH,CAAA,aACZ,kBAGW,OACN,MACD,aACM,CAAA,uCAJC,WAQC,aACA,CAAA,mBATD,UAaD,CAAA,4BAbX,iBAiBgB,CAAA,aACb,WAIM,YACC,eACI,YAcH,CAAA,yBAjBX,WAMW,CAAA,iBAGT,aACW,CAAA,+BAGK,YACL,CAAA,0BAKA,mBACO,CAAA,gCApBpB,aAwBa,CAAA,4BAxBb,iBA4BgB,CAAA,6BA5BhB,cAgCa,YACD,4BACA,CAAA,0BAIA,YACD,CAAA,2BAKE,kBACM,CAAA,YAClB,kBAGW,SACJ,gBACM,cACH,kBACG,UACL,SACD,UACC,CAAA,eAEP,kBACY,qBACD,YACD,WACD,aACC,UACD,cACC,CAAA,sBAER,SACQ,uBACM,cACH,YACD,WACD,aACE,gBACI,cACF,kBACJ,YACE,cACD,CAAA,wDAXJ,YAcO,CAAA,sEADK,SAIZ,CAAO,6BAjBP,kBAqBQ,MACP,OACC,YACK,WACF,YACC,eACG,iBACE,kBACD,WACL,YACA,mCACiB,iCACC,CAAA,0CAIR,WACZ,WACP,CAAO,UACR,WC1KI,cACE,gBACC,kBACA,iBACE,CAAA,cAGL,gBACK,eACD,kBACD,qBACD,cACA,CAAE,0BAIb,SACE,oBACU,CAAA,aACX,WAGQ,SACP,CAAA,+BAGmB,eACT,CAAC,qCAGkB,kBACpB,WACH,YACC,QACJ,SACC,2BACO,kBACC,iBACD,CAAA,mCAGiB,yBAAA,AACrB,gBAAA,CAAA,+BAGiB,gCACJ,qBACL,CAAA,0BAGF,kBACJ,QACN,UACE,WACC,YACC,2BACI,cACJ,mBACI,kBACA,2BACN,WACC,SACN,CAAA,iCAGuB,eAAgB,CAAA,0BAE1B,kBACJ,QACN,SACC,WACE,YACC,2BACI,cACJ,mBACI,kBACA,2BACN,WACC,SACN,CAAA,iCAGuB,eAAgB,CAAA,wBAE1B,wBACR,yBACU,WACT,uCAAA,AACI,+BAAA,SACV,SACA,CAAA,wBAGa,SACb,UACA,wBACK,WACC,gBACI,gBACD,YACF,sCAAA,AACG,6BAAA,CAAA,eACX,eAEyB,CAAC","file":"style.css","sourcesContent":[".pull-left{float:left}.pull-right{float:right}html{box-sizing:border-box;font-size:62.5%}html,body{height:100%}*{margin:0;padding:0}*,*:before,*:after{box-sizing:inherit}body{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;background-color:#fbfbfb;color:#212121;font-family:\"Times New Roman\",sans-serif;font-size:1.6rem;text-rendering:optimizeLegibility}a{text-decoration:none}img,video,canvas{max-width:100%}iframe{height:100%;left:0;position:absolute;top:0;width:100%}@font-face{font-family:'Open Sans';src:url(\"../fonts/OpenSans/OpenSans-Light.ttf\") format(\"truetype\");font-weight:300;font-style:normal}@font-face{font-family:'Open Sans';src:url(\"../fonts/OpenSans/OpenSans-Regular.ttf\") format(\"truetype\");font-weight:400;font-style:normal}@font-face{font-family:'Open Sans';src:url(\"../fonts/OpenSans/OpenSans-Semibold.ttf\") format(\"truetype\");font-weight:600;font-style:normal}@font-face{font-family:'Open Sans';src:url(\"../fonts/OpenSans/OpenSans-Bold.ttf\") format(\"truetype\");font-weight:700;font-style:normal}.container{max-width:1200px;margin-left:auto;margin-right:auto;background-image:linear-gradient(to right, rgba(102,102,255,0.25),rgba(179,179,255,0.25));background-size:8.33333%;background-origin:content-box;background-clip:content-box;background-position:left top}.container:after{content:\" \";display:block;clear:both}.row::after{clear:both;content:'';display:table}.header{text-align:center}.main-nav__item{display:inline-block;padding:0 10px}.slick-slider{position:relative;display:block;box-sizing:border-box;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-touch-action:pan-y;touch-action:pan-y;-webkit-tap-highlight-color:transparent}.slick-list{position:relative;overflow:hidden;display:block;margin:0;padding:0}.slick-list:focus{outline:none}.slick-list.dragging{cursor:pointer;cursor:hand}.slick-slider .slick-track,.slick-slider .slick-list{-webkit-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0)}.slick-track{position:relative;left:0;top:0;display:block}.slick-track:before,.slick-track:after{content:\"\";display:table}.slick-track:after{clear:both}.slick-loading .slick-track{visibility:hidden}.slick-slide{float:left;height:100%;min-height:1px;display:none}[dir=\"rtl\"] .slick-slide{float:right}.slick-slide img{display:block}.slick-slide.slick-loading img{display:none}.slick-slide.dragging img{pointer-events:none}.slick-initialized .slick-slide{display:block}.slick-loading .slick-slide{visibility:hidden}.slick-vertical .slick-slide{display:block;height:auto;border:1px solid transparent}.slick-arrow.slick-hidden{display:none}.slick-dotted.slick-slider{margin-bottom:30px}.slick-dots{position:absolute;bottom:0;list-style:none;display:block;text-align:center;padding:0;margin:0;width:100%}.slick-dots li{position:relative;display:inline-block;height:20px;width:20px;margin:0 5px;padding:0;cursor:pointer}.slick-dots li button{border:0;background:transparent;display:block;height:20px;width:20px;outline:none;line-height:0px;font-size:0px;color:transparent;padding:5px;cursor:pointer}.slick-dots li button:hover,.slick-dots li button:focus{outline:none}.slick-dots li button:hover:before,.slick-dots li button:focus:before{opacity:1}.slick-dots li button:before{position:absolute;top:0;left:0;content:\"â€¢\";width:20px;height:20px;font-size:26px;line-height:20px;text-align:center;color:#000;opacity:.25;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.slick-dots li.slick-active button:before{color:#000;opacity:.75}.img-fill{width:100%;display:block;overflow:hidden;position:relative;text-align:center}.img-fill img{min-height:100%;min-width:100%;position:relative;display:inline-block;max-width:none}.blocks-box,.slick-slider{margin:0;padding:0 !important}.slick-slide{float:left;padding:0}.Modern-Slider .item .img-fill{background:#000}.Modern-Slider .item .img-fill .info{position:absolute;width:100%;height:100%;top:0px;left:0px;background:rgba(0,0,0,0.5);line-height:100vh;text-align:center}.Modern-Slider .item .img-fill img{filter:blur(5px)}.Modern-Slider .item .info>div{display:inline-block !important;vertical-align:middle}.Modern-Slider .NextArrow{position:absolute;top:50%;right:0px;width:45px;height:45px;background:rgba(0,0,0,0.5);border:0 none;margin-top:-22.5px;text-align:center;font:20px/45px FontAwesome;color:#FFF;z-index:5}.Modern-Slider .NextArrow:before{content:'\\f105'}.Modern-Slider .PrevArrow{position:absolute;top:50%;left:0px;width:45px;height:45px;background:rgba(0,0,0,0.5);border:0 none;margin-top:-22.5px;text-align:center;font:20px/45px FontAwesome;color:#FFF;z-index:5}.Modern-Slider .PrevArrow:before{content:'\\f104'}.Modern-Slider .item h3{font:30px/50px RalewayB;text-transform:uppercase;color:#FFF;animation:fadeOutRight 1s both;margin:0;padding:0}.Modern-Slider .item h5{margin:0;padding:0;font:15px/30px RalewayR;color:#FFF;max-width:600px;overflow:hidden;height:60px;animation:fadeOutLeft 1s both}.Modern-Slider{background:#000}\n",".pull-left {\r\n  float: left;\r\n}\r\n\r\n.pull-right {\r\n  float: right;\r\n}\r\n","$susy: (\n  columns: 12,\n  container: 1200px,\n  gutters: 1/4,\n  math: fluid,\n  gutter-position: inside,\n  global-box-sizing: border-box,\n  debug: (image: show)\n);\n\nhtml {\n  box-sizing: border-box;\n  font-size: 62.5%;\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\nbody {\n  @include font-smoothing;\n  background-color: $body-color;\n  color: $primary-font-color;\n  font-family: $primary-font;\n  font-size: $font-size-base;\n  text-rendering: optimizeLegibility;\n}\n\na {\n  text-decoration: none;\n}\n\nimg,\nvideo,\ncanvas {\n  max-width: 100%;\n}\n\niframe {\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n","// rem fallback\r\n@function calculateRem($size) {\r\n  $remSize: $size / 16px;\r\n  @return $remSize * 1rem;\r\n}\r\n\r\n@mixin font-size($size) {\r\n  font-size: $size;\r\n  font-size: calculateRem($size);\r\n}\r\n\r\n// font smoothing\r\n@mixin font-smoothing {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n","//## Typography\n\n$primary-font: 'Times New Roman', sans-serif;\n\n$font-size-base: 1.6rem;\n\n//## Colors\n\n$body-color: #fbfbfb;\n\n$base-font-color: #000;\n$primary-font-color: lighten($base-font-color, 13%);\n$secondary-font-color: #999;\n\n//## Media queries breakpoints\n","@font-face {\n  font-family: 'Open Sans';\n  src: url('../fonts/OpenSans/OpenSans-Light.ttf') format('truetype');\n  font-weight: 300;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Open Sans';\n  src: url('../fonts/OpenSans/OpenSans-Regular.ttf') format('truetype');\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Open Sans';\n  src: url('../fonts/OpenSans/OpenSans-Semibold.ttf') format('truetype');\n  font-weight: 600;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Open Sans';\n  src: url('../fonts/OpenSans/OpenSans-Bold.ttf') format('truetype');\n  font-weight: 700;\n  font-style: normal;\n}\n",".container {\r\n  @include container;\r\n}\r\n\r\n.row {\r\n  @include clearfix;\r\n}\r\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Background Grid Syntax\n// ======================\n\n$susy-overlay-grid-head-exists: false;\n\n\n// Show Grid/s\n// -----------\n// Show grid on any element using either background or overlay.\n// - [$grid]  : <settings>\n@mixin show-grid(\n  $grid: $susy\n) {\n  $inspect: $grid;\n  $_output: debug-get(output, $grid);\n\n  @include susy-inspect(show-grid, $inspect);\n  @if $_output == overlay and susy-get(debug image, $grid) != hide {\n    @include overlay-grid($grid);\n  } @else {\n    @include background-grid($grid);\n  }\n}\n\n@mixin show-grids(\n  $grid: $susy\n) {\n  @include show-grid($grid);\n}\n\n// Background Grid\n// ---------------\n// Show a grid background on any element.\n// - [$grid]  : <settings>\n@mixin background-grid(\n  $grid: $susy\n) {\n  $inspect  : $grid;\n  $_output  : get-background($grid);\n\n  @if length($_output) > 0 {\n    $_flow: susy-get(flow, $grid);\n\n    $_image: ();\n    @each $name, $layer in map-get($_output, image) {\n      $_direction: if($name == baseline, to bottom, to to($_flow));\n      $_image: append($_image, linear-gradient($_direction, $layer), comma);\n    }\n    $_output: map-merge($_output, (image: $_image));\n\n    @include background-grid-output($_output...);\n    @include susy-inspect(background-grid, $inspect);\n  }\n}\n\n\n// Overlay Grid\n// ------------\n// Generate an icon to trigger grid-overlays on any given elements.\n// $grids...  : <selector> [<settings>] [, <selector>]*\n@mixin overlay-grid (\n  $grid: $susy\n) {\n  @if not($susy-overlay-grid-head-exists) {\n    @at-root head { @include overlay-head($grid); }\n    @at-root head:before { @include overlay-trigger; }\n    @at-root head:hover { @include overlay-trigger-hover; }\n    $susy-overlay-grid-head-exists: true !global;\n  }\n\n  head:hover ~ &,\n  head:hover ~ body & {\n    position: relative;\n    &:before {\n      @include grid-overlay-base;\n      @include background-grid($grid);\n    }\n  }\n}\n\n\n// [Private] Overlay Trigger\n// -------------------------\n@mixin overlay-trigger {\n  content: \"|||\";\n  display: block;\n  padding: 5px 10px;\n  font: {\n    family: sans-serif;\n    size: 16px;\n    weight: bold;\n  }\n}\n\n\n// [Private] Overlay Trigger Hover\n// -------------------------------\n@mixin overlay-trigger-hover {\n  background: rgba(white, .5);\n  color: red;\n}\n\n\n// [Private] Overlay Head\n// ----------------------\n// <head> styles to create grid overlay toggle\n@mixin overlay-head (\n  $grid: $susy\n) {\n  $_toggle: debug-get(toggle, $grid);\n  $_horz: null;\n  $_vert: null;\n\n  @each $side in $_toggle {\n    $_horz: if($side == left or $side == right, $side, $_horz);\n    $_vert: if($side == top or $side == bottom, $side, $_vert);\n  }\n\n  display: block;\n  position: fixed;\n  #{$_horz}: 10px;\n  #{$_vert}: 10px;\n  z-index: 999;\n  color: #333;\n  background: rgba(white, .25);\n}\n\n\n// [Private] Grid Overlay Base\n// ---------------------------\n// Base styles for generating a grid overlay\n@mixin grid-overlay-base() {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  content: \" \";\n  z-index: 998;\n}\n\n\n// Get Symmetrical Background\n// --------------------------\n// - $grid: <map>\n@function get-background-sym(\n  $grid\n) {\n  $grid           : parse-grid($grid);\n  $_gutters       : susy-get(gutters, $grid);\n  $_column-width  : susy-get(column-width, $grid);\n  $_math          : susy-get(math, $grid);\n\n  $_color         : debug-get(color);\n  $_trans         : transparent;\n  $_light         : lighten($_color, 15%);\n\n  $_end           : 1 + $_gutters;\n  $_after         : percentage(1/$_end);\n  $_stops         : ();\n  $_size          : span(1 $grid wide);\n\n  @if is-inside($grid) {\n    $_stops: $_color, $_light;\n  } @else if is-split($grid) {\n    $_split: $_gutters/2;\n    $_before: percentage($_split/$_end);\n    $_after: percentage((1 + $_split)/$_end);\n    $_stops: $_trans $_before, $_color $_before, $_light $_after, $_trans $_after;\n  } @else {\n    $_stops: $_color, $_light $_after, $_trans $_after;\n  }\n\n  @if $_math == static {\n    $_size: valid-column-math($_math, $_column-width) * $_end;\n  }\n\n  $_output: (\n    image: (columns: $_stops),\n    size: $_size,\n  );\n\n  @return $_output;\n}\n\n\n// Get Asymmetrical Inside\n// -----------------------\n// - $grid: <settings>\n@function get-asym-inside(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    @if $location == 1 {\n      $this-stop: append($this-stop, $_color, comma);\n    } @else {\n      $start: parse-span(1 at $location $grid);\n      $start: get-isolation($start);\n      $this-stop: append($this-stop, $_color $start, comma);\n    }\n\n    @if $location == susy-count($_columns) {\n      $this-stop: append($this-stop, $_light, comma);\n    } @else {\n      $_end: parse-span(1 at ($location + 1) $grid);\n      $_end: get-isolation($_end);\n      $this-stop: append($this-stop, $_light $_end, comma);\n    }\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Split\n// ----------------------\n// - $grid: <settings>\n@function get-asym-split(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    $start: parse-span(1 at $location $grid);\n    $start: get-isolation($start);\n    $this-stop: append($this-stop, transparent $start, comma);\n    $this-stop: append($this-stop, $_color $start, comma);\n\n    $_end: $start + span(1 at $location $grid);\n    $this-stop: append($this-stop, $_light $_end, comma);\n    $this-stop: append($this-stop, transparent $_end, comma);\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Outside\n// ------------------------\n// - $grid: <settings>\n@function get-asym-outside(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_columns : susy-get(columns, $grid);\n\n  $_color   : debug-get(color);\n  $_light   : lighten($_color, 15%);\n  $_trans   : transparent;\n  $_stops   : ();\n\n  @for $location from 1 through susy-count($_columns) {\n    $this-stop: ();\n\n    @if $location == 1 {\n      $this-stop: append($this-stop, $_color, comma);\n    } @else {\n      $start: parse-span(1 at $location $grid);\n      $start: get-isolation($start);\n      $this-stop: append($this-stop, $_color $start, comma);\n    }\n\n    @if $location == susy-count($_columns) {\n      $this-stop: append($this-stop, $_light, comma);\n    } @else {\n      $gutter: get-span-width(first $location $grid);\n\n      $_end: parse-span(1 at ($location + 1) $grid);\n      $_end: get-isolation($_end);\n\n      $gutter: $_light $gutter, $_trans $gutter, $_trans $_end;\n      $this-stop: join($this-stop, $gutter, comma);\n    }\n\n    $_stops: join($_stops, $this-stop, comma);\n  }\n\n  @return $_stops;\n}\n\n\n// Get Asymmetrical Background\n// ---------------------------\n// - $grid: <settings>\n@function get-background-asym(\n  $grid\n) {\n  $_stops: ();\n\n  @if is-inside($grid) {\n    $_stops: get-asym-inside($grid);\n  } @else if is-split($grid) {\n    $_stops: get-asym-split($grid);\n  } @else {\n    $_stops: get-asym-outside($grid);\n  }\n\n  @return (image: (columns: $_stops));\n}\n\n\n// Get Background\n// --------------\n// - $grid: <settings>\n@function get-background(\n  $grid\n) {\n  $grid     : parse-grid($grid);\n  $_show    : susy-get(debug image, $grid);\n  $_return  : ();\n\n  @if $_show and $_show != 'hide' {\n    $_columns: susy-get(columns, $grid);\n\n    @if $_show != 'show-baseline' {\n      $_sym: is-symmetrical($_columns);\n      $_return: if($_sym, get-background-sym($grid), get-background-asym($grid));\n      $_return: map-merge($_return, (clip: content-box));\n    }\n\n    @if $_show != 'show-columns'\n      and global-variable-exists(base-line-height)\n      and type-of($base-line-height) == 'number'\n      and not unitless($base-line-height) {\n      $_color: variable-exists('grid-background-baseline-color');\n      $_color: if($_color, $grid-background-baseline-color, #000);\n\n      $_image: map-get($_return, image);\n      $_size: map-get($_return, size);\n      $_baseline: (baseline: ($_color 1px, transparent 1px));\n      $_baseline-size: 100% $base-line-height;\n\n      $_return: map-merge($_return, (\n        image: if($_image, map-merge($_image, $_baseline), $_baseline),\n        size: if($_size, ($_size, $_baseline-size), $_baseline-size),\n      ));\n\n      @if $_show == 'show' {\n        $_clip: map-get($_return, clip);\n        $_return: map-merge($_return, (clip: join($_clip, border-box, comma)));\n      }\n    } @else if $_show == 'show-baseline' {\n      @warn 'Please provide a $base-line-height with the desired height and units';\n    }\n  }\n\n  @if map-get($_return, image) {\n    $_return: map-merge($_return, (flow: susy-get(flow, $grid)));\n  }\n\n  @return $_return;\n}\n\n\n// Get Debug\n// ---------\n// Return the value of a debug setting\n// - $key: <setting>\n@function debug-get(\n  $key,\n  $grid: $susy\n) {\n  $key: join(debug, $key, space);\n  @return susy-get($key, $grid);\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Grid Background API\n// ===================\n// - Sub-pixel rounding can lead to several pixels variation between browsers.\n\n// Grid Background Output\n// ----------------------\n// - $image: background-image\n// - $size: background-size\n// - $clip: background-clip\n// - [$flow]: ltr | rtl\n@mixin background-grid-output (\n  $image,\n  $size: null,\n  $clip: null,\n  $flow: map-get($susy-defaults, flow)\n) {\n  $output: (\n    background-image: $image,\n    background-size: $size,\n    background-origin: $clip,\n    background-clip: $clip,\n    background-position: from($flow) top,\n  );\n\n  @include output($output);\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Example usage:\r\n// .wrapper {\r\n//   @include clearfix;\r\n// }\r\n@mixin clearfix {\r\n  &::after {\r\n    clear: both;\r\n    content: '';\r\n    display: table;\r\n  }\r\n}\r\n",".header {\r\n  text-align: center;\r\n}\r\n",".main-nav__item {\r\n  display: inline-block;\r\n  padding: 0 10px;\r\n}\r\n","/* Slider */\r\n\r\n.slick-slider {\r\n  position: relative;\r\n  display: block;\r\n  box-sizing: border-box;\r\n  -webkit-touch-callout: none;\r\n  -webkit-user-select: none;\r\n  -khtml-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  -ms-touch-action: pan-y;\r\n  touch-action: pan-y;\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n\r\n.slick-list {\r\n  position: relative;\r\n  overflow: hidden;\r\n  display: block;\r\n  margin: 0;\r\n  padding: 0;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &.dragging {\r\n    cursor: pointer;\r\n    cursor: hand;\r\n  }\r\n}\r\n\r\n.slick-slider .slick-track,\r\n.slick-slider .slick-list {\r\n  -webkit-transform: translate3d(0, 0, 0);\r\n  -moz-transform: translate3d(0, 0, 0);\r\n  -ms-transform: translate3d(0, 0, 0);\r\n  -o-transform: translate3d(0, 0, 0);\r\n  transform: translate3d(0, 0, 0);\r\n}\r\n\r\n.slick-track {\r\n  position: relative;\r\n  left: 0;\r\n  top: 0;\r\n  display: block;\r\n\r\n  &:before,\r\n  &:after {\r\n    content: \"\";\r\n    display: table;\r\n  }\r\n\r\n  &:after {\r\n    clear: both;\r\n  }\r\n\r\n  .slick-loading & {\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n.slick-slide {\r\n  float: left;\r\n  height: 100%;\r\n  min-height: 1px;\r\n\r\n  [dir=\"rtl\"] & {\r\n    float: right;\r\n  }\r\n\r\n  img {\r\n    display: block;\r\n  }\r\n\r\n  &.slick-loading img {\r\n    display: none;\r\n  }\r\n\r\n  display: none;\r\n\r\n  &.dragging img {\r\n    pointer-events: none;\r\n  }\r\n\r\n  .slick-initialized & {\r\n    display: block;\r\n  }\r\n\r\n  .slick-loading & {\r\n    visibility: hidden;\r\n  }\r\n  \r\n  .slick-vertical & {\r\n    display: block;\r\n    height: auto;\r\n    border: 1px solid transparent;\r\n  }\r\n}\r\n\r\n.slick-arrow.slick-hidden {\r\n  display: none;\r\n}\r\n\r\n/* Dots */\r\n\r\n.slick-dotted.slick-slider {\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.slick-dots {\r\n  position: absolute;\r\n  bottom: 0;\r\n  list-style: none;\r\n  display: block;\r\n  text-align: center;\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 100%;\r\n\r\n  li {\r\n    position: relative;\r\n    display: inline-block;\r\n    height: 20px;\r\n    width: 20px;\r\n    margin: 0 5px;\r\n    padding: 0;\r\n    cursor: pointer;\r\n\r\n    button {\r\n      border: 0;\r\n      background: transparent;\r\n      display: block;\r\n      height: 20px;\r\n      width: 20px;\r\n      outline: none;\r\n      line-height: 0px;\r\n      font-size: 0px;\r\n      color: transparent;\r\n      padding: 5px;\r\n      cursor: pointer;\r\n\r\n      &:hover, &:focus {\r\n        outline: none;\r\n\r\n        &:before {\r\n          opacity: 1;\r\n        }\r\n      }\r\n      &:before {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        content: \"â€¢\";\r\n        width: 20px;\r\n        height: 20px;\r\n        font-size: 26px;\r\n        line-height: 20px;\r\n        text-align: center;\r\n        color: #000;\r\n        opacity: .25;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n      }\r\n    }\r\n    \r\n    &.slick-active button:before {\r\n      color: #000;\r\n      opacity: .75;\r\n    }\r\n  }\r\n}\r\n",".img-fill{\r\n  width: 100%;\r\n  display: block;\r\n  overflow: hidden;\r\n  position: relative;\r\n  text-align: center\r\n}\r\n\r\n.img-fill img {\r\n  min-height: 100%;\r\n  min-width: 100%;\r\n  position: relative;\r\n  display: inline-block;\r\n  max-width: none;\r\n}\r\n\r\n.blocks-box,\r\n.slick-slider {\r\n  margin: 0;\r\n  padding: 0!important;\r\n}\r\n\r\n.slick-slide {\r\n  float: left;\r\n  padding: 0;\r\n}\r\n\r\n.Modern-Slider .item .img-fill{\r\n  background:#000;\r\n}\r\n\r\n.Modern-Slider .item .img-fill .info{\r\n  position:absolute;\r\n  width:100%;\r\n  height:100%;\r\n  top:0px;\r\n  left:0px;\r\n  background:rgba(0,0,0,.50);\r\n  line-height:100vh;\r\n  text-align:center;\r\n}\r\n\r\n.Modern-Slider .item .img-fill img{\r\n  filter:blur(5px);\r\n}\r\n\r\n.Modern-Slider .item .info > div{\r\n  display:inline-block!important;\r\n  vertical-align:middle;\r\n}\r\n\r\n.Modern-Slider .NextArrow{\r\n  position:absolute;\r\n  top:50%;\r\n  right:0px;\r\n  width:45px;\r\n  height:45px;\r\n  background:rgba(0,0,0,.50);\r\n  border:0 none;\r\n  margin-top:-22.5px;\r\n  text-align:center;\r\n  font:20px/45px FontAwesome;\r\n  color:#FFF;\r\n  z-index:5;\r\n}\r\n\r\n.Modern-Slider .NextArrow:before{content:'\\f105';}\r\n\r\n.Modern-Slider .PrevArrow{\r\n  position:absolute;\r\n  top:50%;\r\n  left:0px;\r\n  width:45px;\r\n  height:45px;\r\n  background:rgba(0,0,0,.50);\r\n  border:0 none;\r\n  margin-top:-22.5px;\r\n  text-align:center;\r\n  font:20px/45px FontAwesome;\r\n  color:#FFF;\r\n  z-index:5;\r\n}\r\n\r\n.Modern-Slider .PrevArrow:before{content:'\\f104';}\r\n\r\n.Modern-Slider .item h3{\r\n  font:30px/50px RalewayB;\r\n  text-transform:uppercase;\r\n  color:#FFF;\r\n  animation:fadeOutRight 1s both;\r\n  margin:0;\r\n  padding:0;\r\n}\r\n\r\n.Modern-Slider .item h5{\r\n  margin:0;\r\n  padding:0;\r\n  font:15px/30px RalewayR;\r\n  color:#FFF;\r\n  max-width:600px;\r\n  overflow:hidden;\r\n  height:60px;\r\n  animation:fadeOutLeft 1s both;\r\n}\r\n\r\n.Modern-Slider {background:#000;}\r\n"],"sourceRoot":"/source/"}